package inet.examples.seapp.of;
import inet.nodes.ethernet.EtherSwitch;
import inet.nodes.inet.Router;
import inet.nodes.inet.StandardHost;
import inet.networklayer.autorouting.ipv4.FlatNetworkConfigurator;
import inet.networklayer.autorouting.ipv4.IPv4NetworkConfigurator;
import inet.util.ThruputMeteringChannel;
import inet.globalfilter.GlobalFilter;
import inet.ofomnet.openflow.nodes.*;
import inet.util.*;

network My_Scenario
{
	parameters:
		string attackConfigurationFile = default("none");
	@display("bgb=600,600");
	types:
        channel ethernetline extends ThruputMeteringChannel
        {
            delay = 1us;
            datarate = 100Mbps;
            thruputDisplayFormat = "u";
        }
	submodules:
		configurator: FlatNetworkConfigurator {
            parameters:
                @display("p=50,550");
        }
        client1: StandardHost {
            @display("p=30,300");
        }
        client2: StandardHost {
            @display("p=570,300");
        }
        client3: StandardHost {
            @display("p=300,500");
        }
        open_flow_switch: Open_Flow_Switch {
            @display("p=300,300");
        }
        controller: Open_Flow_Controller {
            @display("p=300,41");
        }

        
	connections allowunconnected:
		
		open_flow_switch.ethg++  <--> ethernetline <--> client1.ethg++;
		open_flow_switch.ethg++  <--> ethernetline <--> client2.ethg++;
		open_flow_switch.ethg++  <--> ethernetline <--> client3.ethg++;
		controller.ethg++ <--> ethernetline <--> open_flow_switch.gate_controller++;
		
        		
}
